// Auto-generated contract configuration
// Do not edit this file manually

export interface ContractConfig {
  paymentContract: string;
  pyusdToken: string;
}

export interface NetworkConfig {
  chainId: number;
  name: string;
  rpcUrl?: string;
  blockExplorer?: string;
  contracts: ContractConfig;
}

export const SUPPORTED_NETWORKS: Record<number, NetworkConfig> = {
  // Local Hardhat Network
  31337: {
    chainId: 31337,
    name: "Hardhat Local",
    rpcUrl: "http://127.0.0.1:8545",
    blockExplorer: "",
    contracts: {
      paymentContract: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      pyusdToken: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    },
  },
  // Ethereum Sepolia Testnet
  11155111: {
    chainId: 11155111,
    name: "Sepolia Testnet",
    rpcUrl: "https://sepolia.infura.io/v3/YOUR_INFURA_KEY",
    blockExplorer: "https://sepolia.etherscan.io",
    contracts: {
      paymentContract: "",
      pyusdToken: "",
    },
  },
  // Ethereum Mainnet
  1: {
    chainId: 1,
    name: "Ethereum Mainnet",
    rpcUrl: "https://mainnet.infura.io/v3/YOUR_INFURA_KEY",
    blockExplorer: "https://etherscan.io",
    contracts: {
      paymentContract: "",
      pyusdToken: "0x6c3ea9036406852006290770BEdFcAbA0e23A0e8",
    },
  },
};

export const DEFAULT_NETWORK_ID = 31337; // Hardhat local for development

export function getNetworkConfig(chainId: number): NetworkConfig | null {
  return SUPPORTED_NETWORKS[chainId] || null;
}

export function isNetworkSupported(chainId: number): boolean {
  return chainId in SUPPORTED_NETWORKS;
}

// Contract ABIs (essential functions only)
export const PAYMENT_CONTRACT_ABI = [
  "function initiatePayment(address recipient, uint256 amount, string calldata metadata) external returns (bytes32 paymentId)",
  "function getPaymentStatus(bytes32 paymentId) external view returns (uint8 status)",
  "function getPayment(bytes32 paymentId) external view returns (tuple(bytes32 id, address sender, address recipient, uint256 amount, uint8 status, uint256 timestamp, uint256 completedAt, string metadata))",
  "function getUserPayments(address user) external view returns (bytes32[] memory paymentIds)",
  "function calculatePlatformFee(uint256 amount) external view returns (uint256 fee)",
  "function getContractStats() external view returns (uint256 totalPayments, uint256 totalVolume, uint256 contractBalance)",
  "function platformFeeRate() external view returns (uint256)",
  "function feeRecipient() external view returns (address)",
  "event PaymentInitiated(bytes32 indexed paymentId, address indexed sender, address indexed recipient, uint256 amount, uint256 timestamp)",
  "event PaymentCompleted(bytes32 indexed paymentId, uint256 completedAt)",
  "event PaymentFailed(bytes32 indexed paymentId, string reason)"
] as const;

export const PYUSD_TOKEN_ABI = [
  "function balanceOf(address account) external view returns (uint256)",
  "function allowance(address owner, address spender) external view returns (uint256)",
  "function approve(address spender, uint256 amount) external returns (bool)",
  "function transfer(address to, uint256 amount) external returns (bool)",
  "function transferFrom(address from, address to, uint256 amount) external returns (bool)",
  "function decimals() external view returns (uint8)",
  "function symbol() external view returns (string)",
  "function name() external view returns (string)",
  // Mock PYUSD specific functions for testing
  "function mint(address to, uint256 amount) external",
  "function faucet(uint256 amount) external"
] as const;

// Payment status enum
export enum PaymentStatus {
  INITIATED = 0,
  PROCESSING = 1,
  COMPLETED = 2,
  FAILED = 3,
  REFUNDED = 4,
}

// Utility constants
export const PYUSD_DECIMALS = 6;
export const DEFAULT_PLATFORM_FEE_RATE = 25; // 0.25% in basis points
export const MAX_FEE_RATE = 1000; // 10% in basis points
