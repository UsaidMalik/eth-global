import { ethers } from "hardhat";
import fs from "fs";
import path from "path";

/**
 * Generate configuration files for frontend integration
 */
async function generateConfig() {
  console.log("Generating configuration files...");

  // Get network info
  const network = await ethers.provider.getNetwork();
  const chainId = Number(network.chainId);

  // Contract addresses (these would be set after deployment)
  const contractAddresses = {
    // Local development
    31337: {
      paymentContract: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      pyusdToken: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    },
    // Ethereum Sepolia testnet
    11155111: {
      paymentContract: "", // To be filled after deployment
      pyusdToken: "", // To be filled after deployment
    },
    // Ethereum Mainnet
    1: {
      paymentContract: "", // To be filled after deployment
      pyusdToken: "0x6c3ea9036406852006290770BEdFcAbA0e23A0e8", // Real PYUSD address
    },
  };

  // Generate TypeScript config
  const tsConfig = `// Auto-generated contract configuration
// Do not edit this file manually

export interface ContractConfig {
  paymentContract: string;
  pyusdToken: string;
}

export interface NetworkConfig {
  chainId: number;
  name: string;
  rpcUrl?: string;
  blockExplorer?: string;
  contracts: ContractConfig;
}

export const SUPPORTED_NETWORKS: Record<number, NetworkConfig> = {
  // Local Hardhat Network
  31337: {
    chainId: 31337,
    name: "Hardhat Local",
    rpcUrl: "http://127.0.0.1:8545",
    blockExplorer: "",
    contracts: {
      paymentContract: "${contractAddresses[31337].paymentContract}",
      pyusdToken: "${contractAddresses[31337].pyusdToken}",
    },
  },
  // Ethereum Sepolia Testnet
  11155111: {
    chainId: 11155111,
    name: "Sepolia Testnet",
    rpcUrl: "https://sepolia.infura.io/v3/YOUR_INFURA_KEY",
    blockExplorer: "https://sepolia.etherscan.io",
    contracts: {
      paymentContract: "${contractAddresses[11155111].paymentContract}",
      pyusdToken: "${contractAddresses[11155111].pyusdToken}",
    },
  },
  // Ethereum Mainnet
  1: {
    chainId: 1,
    name: "Ethereum Mainnet",
    rpcUrl: "https://mainnet.infura.io/v3/YOUR_INFURA_KEY",
    blockExplorer: "https://etherscan.io",
    contracts: {
      paymentContract: "${contractAddresses[1].paymentContract}",
      pyusdToken: "${contractAddresses[1].pyusdToken}",
    },
  },
};

export const DEFAULT_NETWORK_ID = 31337; // Hardhat local for development

export function getNetworkConfig(chainId: number): NetworkConfig | null {
  return SUPPORTED_NETWORKS[chainId] || null;
}

export function isNetworkSupported(chainId: number): boolean {
  return chainId in SUPPORTED_NETWORKS;
}

// Contract ABIs (essential functions only)
export const PAYMENT_CONTRACT_ABI = [
  "function initiatePayment(address recipient, uint256 amount, string calldata metadata) external returns (bytes32 paymentId)",
  "function getPaymentStatus(bytes32 paymentId) external view returns (uint8 status)",
  "function getPayment(bytes32 paymentId) external view returns (tuple(bytes32 id, address sender, address recipient, uint256 amount, uint8 status, uint256 timestamp, uint256 completedAt, string metadata))",
  "function getUserPayments(address user) external view returns (bytes32[] memory paymentIds)",
  "function calculatePlatformFee(uint256 amount) external view returns (uint256 fee)",
  "function getContractStats() external view returns (uint256 totalPayments, uint256 totalVolume, uint256 contractBalance)",
  "function platformFeeRate() external view returns (uint256)",
  "function feeRecipient() external view returns (address)",
  "event PaymentInitiated(bytes32 indexed paymentId, address indexed sender, address indexed recipient, uint256 amount, uint256 timestamp)",
  "event PaymentCompleted(bytes32 indexed paymentId, uint256 completedAt)",
  "event PaymentFailed(bytes32 indexed paymentId, string reason)"
] as const;

export const PYUSD_TOKEN_ABI = [
  "function balanceOf(address account) external view returns (uint256)",
  "function allowance(address owner, address spender) external view returns (uint256)",
  "function approve(address spender, uint256 amount) external returns (bool)",
  "function transfer(address to, uint256 amount) external returns (bool)",
  "function transferFrom(address from, address to, uint256 amount) external returns (bool)",
  "function decimals() external view returns (uint8)",
  "function symbol() external view returns (string)",
  "function name() external view returns (string)",
  // Mock PYUSD specific functions for testing
  "function mint(address to, uint256 amount) external",
  "function faucet(uint256 amount) external"
] as const;

// Payment status enum
export enum PaymentStatus {
  INITIATED = 0,
  PROCESSING = 1,
  COMPLETED = 2,
  FAILED = 3,
  REFUNDED = 4,
}

// Utility constants
export const PYUSD_DECIMALS = 6;
export const DEFAULT_PLATFORM_FEE_RATE = 25; // 0.25% in basis points
export const MAX_FEE_RATE = 1000; // 10% in basis points
`;

  // Generate JSON config for easy consumption
  const jsonConfig = {
    networks: SUPPORTED_NETWORKS,
    defaultNetworkId: 31337,
    contracts: {
      paymentContractAbi: [
        "function initiatePayment(address recipient, uint256 amount, string calldata metadata) external returns (bytes32 paymentId)",
        "function getPaymentStatus(bytes32 paymentId) external view returns (uint8 status)",
        "function getPayment(bytes32 paymentId) external view returns (tuple(bytes32 id, address sender, address recipient, uint256 amount, uint8 status, uint256 timestamp, uint256 completedAt, string metadata))",
        "function getUserPayments(address user) external view returns (bytes32[] memory paymentIds)",
        "function calculatePlatformFee(uint256 amount) external view returns (uint256 fee)",
        "function getContractStats() external view returns (uint256 totalPayments, uint256 totalVolume, uint256 contractBalance)",
        "function platformFeeRate() external view returns (uint256)",
        "function feeRecipient() external view returns (address)",
        "event PaymentInitiated(bytes32 indexed paymentId, address indexed sender, address indexed recipient, uint256 amount, uint256 timestamp)",
        "event PaymentCompleted(bytes32 indexed paymentId, uint256 completedAt)",
        "event PaymentFailed(bytes32 indexed paymentId, string reason)"
      ],
      pyusdTokenAbi: [
        "function balanceOf(address account) external view returns (uint256)",
        "function allowance(address owner, address spender) external view returns (uint256)",
        "function approve(address spender, uint256 amount) external returns (bool)",
        "function transfer(address to, uint256 amount) external returns (bool)",
        "function transferFrom(address from, address to, uint256 amount) external returns (bool)",
        "function decimals() external view returns (uint8)",
        "function symbol() external view returns (string)",
        "function name() external view returns (string)",
        "function mint(address to, uint256 amount) external",
        "function faucet(uint256 amount) external"
      ]
    },
    constants: {
      pyusdDecimals: 6,
      defaultPlatformFeeRate: 25,
      maxFeeRate: 1000,
      paymentStatus: {
        INITIATED: 0,
        PROCESSING: 1,
        COMPLETED: 2,
        FAILED: 3,
        REFUNDED: 4
      }
    }
  };

  // Create config directory if it doesn't exist
  const configDir = path.join(__dirname, "..", "config");
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }

  // Write TypeScript config
  const tsConfigPath = path.join(configDir, "contracts.ts");
  fs.writeFileSync(tsConfigPath, tsConfig);
  console.log("Generated TypeScript config:", tsConfigPath);

  // Write JSON config
  const jsonConfigPath = path.join(configDir, "contracts.json");
  fs.writeFileSync(jsonConfigPath, JSON.stringify(jsonConfig, null, 2));
  console.log("Generated JSON config:", jsonConfigPath);

  // Generate environment template
  const envTemplate = `# Contract Configuration
# Copy this to your frontend .env file and update the values

# Network Configuration
NEXT_PUBLIC_DEFAULT_CHAIN_ID=31337
NEXT_PUBLIC_ENABLE_TESTNETS=true

# Contract Addresses (Local Development)
NEXT_PUBLIC_PAYMENT_CONTRACT_ADDRESS_31337=${contractAddresses[31337].paymentContract}
NEXT_PUBLIC_PYUSD_TOKEN_ADDRESS_31337=${contractAddresses[31337].pyusdToken}

# Contract Addresses (Sepolia Testnet)
NEXT_PUBLIC_PAYMENT_CONTRACT_ADDRESS_11155111=${contractAddresses[11155111].paymentContract}
NEXT_PUBLIC_PYUSD_TOKEN_ADDRESS_11155111=${contractAddresses[11155111].pyusdToken}

# Contract Addresses (Mainnet)
NEXT_PUBLIC_PAYMENT_CONTRACT_ADDRESS_1=${contractAddresses[1].paymentContract}
NEXT_PUBLIC_PYUSD_TOKEN_ADDRESS_1=${contractAddresses[1].pyusdToken}

# RPC URLs (Optional - fallback to public RPCs)
NEXT_PUBLIC_ETHEREUM_RPC_URL=
NEXT_PUBLIC_SEPOLIA_RPC_URL=

# Development Settings
NEXT_PUBLIC_USE_MOCK_SERVICES=true
NEXT_PUBLIC_ENABLE_DEBUG_LOGS=true
`;

  const envTemplatePath = path.join(configDir, ".env.template");
  fs.writeFileSync(envTemplatePath, envTemplate);
  console.log("Generated environment template:", envTemplatePath);

  console.log("\nConfiguration files generated successfully!");
  console.log("Next steps:");
  console.log("1. Copy the generated config files to your frontend project");
  console.log("2. Update contract addresses after deploying to testnets/mainnet");
  console.log("3. Configure RPC URLs and other environment variables");
}

// Handle errors
generateConfig()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("Config generation failed:", error);
    process.exit(1);
  });

// Define SUPPORTED_NETWORKS for the JSON config
const SUPPORTED_NETWORKS = {
  31337: {
    chainId: 31337,
    name: "Hardhat Local",
    rpcUrl: "http://127.0.0.1:8545",
    blockExplorer: "",
    contracts: {
      paymentContract: "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
      pyusdToken: "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    },
  },
  11155111: {
    chainId: 11155111,
    name: "Sepolia Testnet",
    rpcUrl: "https://sepolia.infura.io/v3/YOUR_INFURA_KEY",
    blockExplorer: "https://sepolia.etherscan.io",
    contracts: {
      paymentContract: "",
      pyusdToken: "",
    },
  },
  1: {
    chainId: 1,
    name: "Ethereum Mainnet",
    rpcUrl: "https://mainnet.infura.io/v3/YOUR_INFURA_KEY",
    blockExplorer: "https://etherscan.io",
    contracts: {
      paymentContract: "",
      pyusdToken: "0x6c3ea9036406852006290770BEdFcAbA0e23A0e8",
    },
  },
};