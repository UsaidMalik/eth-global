/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace PaymentContract {
  export type PaymentStruct = {
    id: BytesLike;
    sender: AddressLike;
    recipient: AddressLike;
    amount: BigNumberish;
    status: BigNumberish;
    timestamp: BigNumberish;
    completedAt: BigNumberish;
    metadata: string;
  };

  export type PaymentStructOutput = [
    id: string,
    sender: string,
    recipient: string,
    amount: bigint,
    status: bigint,
    timestamp: bigint,
    completedAt: bigint,
    metadata: string
  ] & {
    id: string;
    sender: string;
    recipient: string;
    amount: bigint;
    status: bigint;
    timestamp: bigint;
    completedAt: bigint;
    metadata: string;
  };
}

export interface PaymentContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_FEE_RATE"
      | "calculatePlatformFee"
      | "emergencyRefund"
      | "emergencyWithdraw"
      | "feeRecipient"
      | "getContractStats"
      | "getPayment"
      | "getPaymentStatus"
      | "getUserPayments"
      | "initiatePayment"
      | "owner"
      | "pause"
      | "paused"
      | "payments"
      | "platformFeeRate"
      | "pyusdToken"
      | "renounceOwnership"
      | "totalPayments"
      | "totalVolume"
      | "transferOwnership"
      | "unpause"
      | "updateFeeRate"
      | "updateFeeRecipient"
      | "userPayments"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeRateUpdated"
      | "FeeRecipientUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "PaymentCompleted"
      | "PaymentFailed"
      | "PaymentInitiated"
      | "PaymentRefunded"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_FEE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRefund",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPayments",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiatePayment",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "payments", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "platformFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyusdToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalPayments",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPayments",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_FEE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiatePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pyusdToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPayments",
    data: BytesLike
  ): Result;
}

export namespace FeeRateUpdatedEvent {
  export type InputTuple = [oldRate: BigNumberish, newRate: BigNumberish];
  export type OutputTuple = [oldRate: bigint, newRate: bigint];
  export interface OutputObject {
    oldRate: bigint;
    newRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [oldRecipient: string, newRecipient: string];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentCompletedEvent {
  export type InputTuple = [paymentId: BytesLike, completedAt: BigNumberish];
  export type OutputTuple = [paymentId: string, completedAt: bigint];
  export interface OutputObject {
    paymentId: string;
    completedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentFailedEvent {
  export type InputTuple = [paymentId: BytesLike, reason: string];
  export type OutputTuple = [paymentId: string, reason: string];
  export interface OutputObject {
    paymentId: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentInitiatedEvent {
  export type InputTuple = [
    paymentId: BytesLike,
    sender: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    paymentId: string,
    sender: string,
    recipient: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    paymentId: string;
    sender: string;
    recipient: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentRefundedEvent {
  export type InputTuple = [paymentId: BytesLike, refundAmount: BigNumberish];
  export type OutputTuple = [paymentId: string, refundAmount: bigint];
  export interface OutputObject {
    paymentId: string;
    refundAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentContract extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentContract;
  waitForDeployment(): Promise<this>;

  interface: PaymentContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_FEE_RATE: TypedContractMethod<[], [bigint], "view">;

  calculatePlatformFee: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  emergencyRefund: TypedContractMethod<
    [paymentId: BytesLike],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getContractStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalPayments: bigint;
        _totalVolume: bigint;
        _contractBalance: bigint;
      }
    ],
    "view"
  >;

  getPayment: TypedContractMethod<
    [paymentId: BytesLike],
    [PaymentContract.PaymentStructOutput],
    "view"
  >;

  getPaymentStatus: TypedContractMethod<
    [paymentId: BytesLike],
    [bigint],
    "view"
  >;

  getUserPayments: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  initiatePayment: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, metadata: string],
    [string],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  payments: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, bigint, string] & {
        id: string;
        sender: string;
        recipient: string;
        amount: bigint;
        status: bigint;
        timestamp: bigint;
        completedAt: bigint;
        metadata: string;
      }
    ],
    "view"
  >;

  platformFeeRate: TypedContractMethod<[], [bigint], "view">;

  pyusdToken: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  totalPayments: TypedContractMethod<[], [bigint], "view">;

  totalVolume: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateFeeRate: TypedContractMethod<
    [newFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateFeeRecipient: TypedContractMethod<
    [newFeeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  userPayments: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_FEE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePlatformFee"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyRefund"
  ): TypedContractMethod<[paymentId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getContractStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _totalPayments: bigint;
        _totalVolume: bigint;
        _contractBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPayment"
  ): TypedContractMethod<
    [paymentId: BytesLike],
    [PaymentContract.PaymentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentStatus"
  ): TypedContractMethod<[paymentId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPayments"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "initiatePayment"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish, metadata: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "payments"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, bigint, bigint, bigint, string] & {
        id: string;
        sender: string;
        recipient: string;
        amount: bigint;
        status: bigint;
        timestamp: bigint;
        completedAt: bigint;
        metadata: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "platformFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pyusdToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalPayments"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVolume"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRate"
  ): TypedContractMethod<[newFeeRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient"
  ): TypedContractMethod<[newFeeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPayments"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "FeeRateUpdated"
  ): TypedContractEvent<
    FeeRateUpdatedEvent.InputTuple,
    FeeRateUpdatedEvent.OutputTuple,
    FeeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentCompleted"
  ): TypedContractEvent<
    PaymentCompletedEvent.InputTuple,
    PaymentCompletedEvent.OutputTuple,
    PaymentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentFailed"
  ): TypedContractEvent<
    PaymentFailedEvent.InputTuple,
    PaymentFailedEvent.OutputTuple,
    PaymentFailedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentInitiated"
  ): TypedContractEvent<
    PaymentInitiatedEvent.InputTuple,
    PaymentInitiatedEvent.OutputTuple,
    PaymentInitiatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentRefunded"
  ): TypedContractEvent<
    PaymentRefundedEvent.InputTuple,
    PaymentRefundedEvent.OutputTuple,
    PaymentRefundedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "FeeRateUpdated(uint256,uint256)": TypedContractEvent<
      FeeRateUpdatedEvent.InputTuple,
      FeeRateUpdatedEvent.OutputTuple,
      FeeRateUpdatedEvent.OutputObject
    >;
    FeeRateUpdated: TypedContractEvent<
      FeeRateUpdatedEvent.InputTuple,
      FeeRateUpdatedEvent.OutputTuple,
      FeeRateUpdatedEvent.OutputObject
    >;

    "FeeRecipientUpdated(address,address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PaymentCompleted(bytes32,uint256)": TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;
    PaymentCompleted: TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;

    "PaymentFailed(bytes32,string)": TypedContractEvent<
      PaymentFailedEvent.InputTuple,
      PaymentFailedEvent.OutputTuple,
      PaymentFailedEvent.OutputObject
    >;
    PaymentFailed: TypedContractEvent<
      PaymentFailedEvent.InputTuple,
      PaymentFailedEvent.OutputTuple,
      PaymentFailedEvent.OutputObject
    >;

    "PaymentInitiated(bytes32,address,address,uint256,uint256)": TypedContractEvent<
      PaymentInitiatedEvent.InputTuple,
      PaymentInitiatedEvent.OutputTuple,
      PaymentInitiatedEvent.OutputObject
    >;
    PaymentInitiated: TypedContractEvent<
      PaymentInitiatedEvent.InputTuple,
      PaymentInitiatedEvent.OutputTuple,
      PaymentInitiatedEvent.OutputObject
    >;

    "PaymentRefunded(bytes32,uint256)": TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;
    PaymentRefunded: TypedContractEvent<
      PaymentRefundedEvent.InputTuple,
      PaymentRefundedEvent.OutputTuple,
      PaymentRefundedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
